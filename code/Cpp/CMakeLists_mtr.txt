
################################################################################
# CMakeLists.txt for DynamixelSDK C++ Library
################################################################################
#
# PURPOSE:
#   Builds the DynamixelSDK C++ library from source for cross-platform use.
#   This replaces the Visual Studio .sln build files with a CMake-based build
#   system compatible with MinGW/GCC on Windows and native compilers on Linux.
#
# WHAT IT BUILDS:
#   - Shared library (.dll on Windows, .so on Linux)
#   - Static library (.a files)
#   - Platform-specific naming:
#     * Windows 64-bit: dxl_x64_cpp.dll
#     * Windows 32-bit: dxl_x86_cpp.dll  
#     * Linux ARM64:    dxl_aarch64_cpp.so
#
# DIRECTORY STRUCTURE EXPECTED:
#   DynamixelSDK/                    (Place this CMakeLists.txt here)
#   ├── CMakeLists.txt              (This file)
#   ├── c++/
#   │   ├── include/
#   │   │   └── dynamixel_sdk/       (Header files: *.h)
#   │   └── src/
#   │       └── dynamixel_sdk/       (Source files: *.cpp)
#   └── build/                       (Created during build)
#
# HOW TO BUILD:
#
#   1. Prerequisites:
#      - CMake 3.10 or later
#      - C++ compiler (MinGW/GCC on Windows, gcc on Linux)
#      - Git (to download DynamixelSDK source)
#
#   2. Get the source code:
#      git clone https://github.com/ROBOTIS-GIT/DynamixelSDK.git
#      cd DynamixelSDK
#
#   3. Place this CMakeLists.txt in the DynamixelSDK root directory
#
#   4. Build the library:
#      mkdir build
#      cd build
#      
#      # For Windows with MinGW:
#      cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release ..
#      mingw32-make -j4
#      
#      # For Linux:
#      cmake -DCMAKE_BUILD_TYPE=Release ..
#      make -j4
#
#   5. Result:
#      The built library files will be in the build/ directory:
#      - libdxl_x64_cpp.dll (Windows shared library)
#      - libdxl_x64_cpp.dll.a (Windows import library for linking)
#      - libdxl_x64_cpp_static.a (Windows static library)
#
# USING THE LIBRARY:
#   Copy the .dll to your project directory and link with:
#   - Include path: -I../DynamixelSDK/c++/include
#   - Library path: -L../DynamixelSDK/build
#   - Link library: -ldxl_x64_cpp
#   - Windows libs: -lws2_32 -lwinmm
#
# PLATFORM-SPECIFIC NOTES:
#   - Windows: Automatically links Windows socket (ws2_32) and multimedia (winmm) libraries
#   - Linux: Automatically links real-time (rt) library
#   - Cross-compilation: Set CMAKE_TOOLCHAIN_FILE for cross-compiling
#
################################################################################


cmake_minimum_required(VERSION 3.10)
project(DynamixelSDK_CPP)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Platform-specific definitions
if(WIN32)
    add_definitions(-DWIN32 -D_WIN32_WINNT=0x0501)
    if(MINGW)
        message(STATUS "Building DynamixelSDK with MinGW")
    endif()
else()
    add_definitions(-DLINUX -D_GNU_SOURCE)
endif()

# Include directories - add both the main include and the dynamixel_sdk subdirectory
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/c++/include
    ${CMAKE_CURRENT_SOURCE_DIR}/c++/include/dynamixel_sdk
)

# Find all source files
file(GLOB_RECURSE CPP_SOURCES
    "${CMAKE_CURRENT_SOURCE_DIR}/src/dynamixel_sdk/*.cpp"
)

# Print found sources for debugging
message(STATUS "Found C++ sources: ${CPP_SOURCES}")

# Create shared library
add_library(dynamixel_sdk SHARED ${CPP_SOURCES})

# Create static library
add_library(dynamixel_sdk_static STATIC ${CPP_SOURCES})

# Set include directories for the targets
target_include_directories(dynamixel_sdk PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/c++/include
    ${CMAKE_CURRENT_SOURCE_DIR}/c++/include/dynamixel_sdk
)

target_include_directories(dynamixel_sdk_static PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/c++/include
    ${CMAKE_CURRENT_SOURCE_DIR}/c++/include/dynamixel_sdk
)

# Platform-specific linking and naming
if(WIN32)
    target_link_libraries(dynamixel_sdk ws2_32 winmm)
    target_link_libraries(dynamixel_sdk_static ws2_32 winmm)

    if(CMAKE_SIZEOF_VOID_P EQUAL 8) # 64 bit architecture
        set_target_properties(dynamixel_sdk PROPERTIES OUTPUT_NAME "dxl_x64_cpp")
        set_target_properties(dynamixel_sdk_static PROPERTIES OUTPUT_NAME "dxl_x64_cpp_static")
    else() # 32 bit architecture
        set_target_properties(dynamixel_sdk PROPERTIES OUTPUT_NAME "dxl_x86_cpp")
        set_target_properties(dynamixel_sdk_static PROPERTIES OUTPUT_NAME "dxl_x86_cpp_static")
    endif()
else() # linux
    target_link_libraries(dynamixel_sdk rt)
    target_link_libraries(dynamixel_sdk_static rt)
    set_target_properties(dynamixel_sdk PROPERTIES OUTPUT_NAME "dxl_aarch64_cpp")
    set_target_properties(dynamixel_sdk_static PROPERTIES OUTPUT_NAME "dxl_aarch64_cpp_static")
endif()

# Installation
install(TARGETS dynamixel_sdk dynamixel_sdk_static
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
)

install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/dynamixel_sdk/ DESTINATION include
    FILES_MATCHING PATTERN "*.h"
)
