
oneMotorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001640  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800174c  0800174c  0000274c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001778  08001778  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001778  08001778  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001778  08001778  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001778  08001778  00002778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800177c  0800177c  0000277c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001780  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  0800178c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  0800178c  00003074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bba  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001669  00000000  00000000  0000abef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  0000c258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000723  00000000  00000000  0000cba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016794  00000000  00000000  0000d2c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab6f  00000000  00000000  00023a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000842fc  00000000  00000000  0002e5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b28c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025d4  00000000  00000000  000b2908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000b4edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001734 	.word	0x08001734

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001734 	.word	0x08001734

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9ac 	bl	80004ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f804 	bl	8000160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f83e 	bl	80001d8 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800015c:	bf00      	nop
 800015e:	e7fd      	b.n	800015c <main+0x10>

08000160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b090      	sub	sp, #64	@ 0x40
 8000164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000166:	f107 0318 	add.w	r3, r7, #24
 800016a:	2228      	movs	r2, #40	@ 0x28
 800016c:	2100      	movs	r1, #0
 800016e:	4618      	mov	r0, r3
 8000170:	f001 fab4 	bl	80016dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000174:	1d3b      	adds	r3, r7, #4
 8000176:	2200      	movs	r2, #0
 8000178:	601a      	str	r2, [r3, #0]
 800017a:	605a      	str	r2, [r3, #4]
 800017c:	609a      	str	r2, [r3, #8]
 800017e:	60da      	str	r2, [r3, #12]
 8000180:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000182:	2302      	movs	r3, #2
 8000184:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000186:	2301      	movs	r3, #1
 8000188:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800018a:	2310      	movs	r3, #16
 800018c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800018e:	2300      	movs	r3, #0
 8000190:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000192:	f107 0318 	add.w	r3, r7, #24
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fc36 	bl	8000a08 <HAL_RCC_OscConfig>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001a2:	f000 f877 	bl	8000294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001a6:	230f      	movs	r3, #15
 80001a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001aa:	2300      	movs	r3, #0
 80001ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ae:	2300      	movs	r3, #0
 80001b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001b2:	2300      	movs	r3, #0
 80001b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001b6:	2300      	movs	r3, #0
 80001b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001ba:	1d3b      	adds	r3, r7, #4
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 fea4 	bl	8000f0c <HAL_RCC_ClockConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001ca:	f000 f863 	bl	8000294 <Error_Handler>
  }
}
 80001ce:	bf00      	nop
 80001d0:	3740      	adds	r7, #64	@ 0x40
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
	...

080001d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b088      	sub	sp, #32
 80001dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001de:	f107 0310 	add.w	r3, r7, #16
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000268 <MX_GPIO_Init+0x90>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000268 <MX_GPIO_Init+0x90>)
 80001f2:	f043 0310 	orr.w	r3, r3, #16
 80001f6:	6193      	str	r3, [r2, #24]
 80001f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000268 <MX_GPIO_Init+0x90>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	f003 0310 	and.w	r3, r3, #16
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000204:	4b18      	ldr	r3, [pc, #96]	@ (8000268 <MX_GPIO_Init+0x90>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	4a17      	ldr	r2, [pc, #92]	@ (8000268 <MX_GPIO_Init+0x90>)
 800020a:	f043 0304 	orr.w	r3, r3, #4
 800020e:	6193      	str	r3, [r2, #24]
 8000210:	4b15      	ldr	r3, [pc, #84]	@ (8000268 <MX_GPIO_Init+0x90>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	f003 0304 	and.w	r3, r3, #4
 8000218:	60bb      	str	r3, [r7, #8]
 800021a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800021c:	4b12      	ldr	r3, [pc, #72]	@ (8000268 <MX_GPIO_Init+0x90>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	4a11      	ldr	r2, [pc, #68]	@ (8000268 <MX_GPIO_Init+0x90>)
 8000222:	f043 0308 	orr.w	r3, r3, #8
 8000226:	6193      	str	r3, [r2, #24]
 8000228:	4b0f      	ldr	r3, [pc, #60]	@ (8000268 <MX_GPIO_Init+0x90>)
 800022a:	699b      	ldr	r3, [r3, #24]
 800022c:	f003 0308 	and.w	r3, r3, #8
 8000230:	607b      	str	r3, [r7, #4]
 8000232:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800023a:	480c      	ldr	r0, [pc, #48]	@ (800026c <MX_GPIO_Init+0x94>)
 800023c:	f000 fbcc 	bl	80009d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000240:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000244:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000246:	2301      	movs	r3, #1
 8000248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800024a:	2302      	movs	r3, #2
 800024c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024e:	2302      	movs	r3, #2
 8000250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000252:	f107 0310 	add.w	r3, r7, #16
 8000256:	4619      	mov	r1, r3
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <MX_GPIO_Init+0x94>)
 800025a:	f000 fa39 	bl	80006d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800025e:	bf00      	nop
 8000260:	3720      	adds	r7, #32
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40021000 	.word	0x40021000
 800026c:	40010c00 	.word	0x40010c00

08000270 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a04      	ldr	r2, [pc, #16]	@ (8000290 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d101      	bne.n	8000286 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000282:	f000 f929 	bl	80004d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40012c00 	.word	0x40012c00

08000294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000298:	b672      	cpsid	i
}
 800029a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800029c:	bf00      	nop
 800029e:	e7fd      	b.n	800029c <Error_Handler+0x8>

080002a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002a6:	4b15      	ldr	r3, [pc, #84]	@ (80002fc <HAL_MspInit+0x5c>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	4a14      	ldr	r2, [pc, #80]	@ (80002fc <HAL_MspInit+0x5c>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	6193      	str	r3, [r2, #24]
 80002b2:	4b12      	ldr	r3, [pc, #72]	@ (80002fc <HAL_MspInit+0x5c>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	f003 0301 	and.w	r3, r3, #1
 80002ba:	60bb      	str	r3, [r7, #8]
 80002bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002be:	4b0f      	ldr	r3, [pc, #60]	@ (80002fc <HAL_MspInit+0x5c>)
 80002c0:	69db      	ldr	r3, [r3, #28]
 80002c2:	4a0e      	ldr	r2, [pc, #56]	@ (80002fc <HAL_MspInit+0x5c>)
 80002c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002c8:	61d3      	str	r3, [r2, #28]
 80002ca:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <HAL_MspInit+0x5c>)
 80002cc:	69db      	ldr	r3, [r3, #28]
 80002ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000300 <HAL_MspInit+0x60>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	4a04      	ldr	r2, [pc, #16]	@ (8000300 <HAL_MspInit+0x60>)
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002f2:	bf00      	nop
 80002f4:	3714      	adds	r7, #20
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	40021000 	.word	0x40021000
 8000300:	40010000 	.word	0x40010000

08000304 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b08c      	sub	sp, #48	@ 0x30
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800030c:	2300      	movs	r3, #0
 800030e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000310:	2300      	movs	r3, #0
 8000312:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000314:	2300      	movs	r3, #0
 8000316:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800031a:	4b2e      	ldr	r3, [pc, #184]	@ (80003d4 <HAL_InitTick+0xd0>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a2d      	ldr	r2, [pc, #180]	@ (80003d4 <HAL_InitTick+0xd0>)
 8000320:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000324:	6193      	str	r3, [r2, #24]
 8000326:	4b2b      	ldr	r3, [pc, #172]	@ (80003d4 <HAL_InitTick+0xd0>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800032e:	60bb      	str	r3, [r7, #8]
 8000330:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000332:	f107 020c 	add.w	r2, r7, #12
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	4611      	mov	r1, r2
 800033c:	4618      	mov	r0, r3
 800033e:	f000 ff41 	bl	80011c4 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000342:	f000 ff2b 	bl	800119c <HAL_RCC_GetPCLK2Freq>
 8000346:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800034a:	4a23      	ldr	r2, [pc, #140]	@ (80003d8 <HAL_InitTick+0xd4>)
 800034c:	fba2 2303 	umull	r2, r3, r2, r3
 8000350:	0c9b      	lsrs	r3, r3, #18
 8000352:	3b01      	subs	r3, #1
 8000354:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000356:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <HAL_InitTick+0xd8>)
 8000358:	4a21      	ldr	r2, [pc, #132]	@ (80003e0 <HAL_InitTick+0xdc>)
 800035a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800035c:	4b1f      	ldr	r3, [pc, #124]	@ (80003dc <HAL_InitTick+0xd8>)
 800035e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000362:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000364:	4a1d      	ldr	r2, [pc, #116]	@ (80003dc <HAL_InitTick+0xd8>)
 8000366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000368:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800036a:	4b1c      	ldr	r3, [pc, #112]	@ (80003dc <HAL_InitTick+0xd8>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000370:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <HAL_InitTick+0xd8>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000376:	4b19      	ldr	r3, [pc, #100]	@ (80003dc <HAL_InitTick+0xd8>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800037c:	4817      	ldr	r0, [pc, #92]	@ (80003dc <HAL_InitTick+0xd8>)
 800037e:	f000 ff6f 	bl	8001260 <HAL_TIM_Base_Init>
 8000382:	4603      	mov	r3, r0
 8000384:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000388:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800038c:	2b00      	cmp	r3, #0
 800038e:	d11b      	bne.n	80003c8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000390:	4812      	ldr	r0, [pc, #72]	@ (80003dc <HAL_InitTick+0xd8>)
 8000392:	f000 ffbd 	bl	8001310 <HAL_TIM_Base_Start_IT>
 8000396:	4603      	mov	r3, r0
 8000398:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800039c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d111      	bne.n	80003c8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80003a4:	2019      	movs	r0, #25
 80003a6:	f000 f984 	bl	80006b2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2b0f      	cmp	r3, #15
 80003ae:	d808      	bhi.n	80003c2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80003b0:	2200      	movs	r2, #0
 80003b2:	6879      	ldr	r1, [r7, #4]
 80003b4:	2019      	movs	r0, #25
 80003b6:	f000 f960 	bl	800067a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80003ba:	4a0a      	ldr	r2, [pc, #40]	@ (80003e4 <HAL_InitTick+0xe0>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	6013      	str	r3, [r2, #0]
 80003c0:	e002      	b.n	80003c8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80003c2:	2301      	movs	r3, #1
 80003c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80003c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3730      	adds	r7, #48	@ 0x30
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40021000 	.word	0x40021000
 80003d8:	431bde83 	.word	0x431bde83
 80003dc:	20000028 	.word	0x20000028
 80003e0:	40012c00 	.word	0x40012c00
 80003e4:	20000004 	.word	0x20000004

080003e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003ec:	bf00      	nop
 80003ee:	e7fd      	b.n	80003ec <NMI_Handler+0x4>

080003f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f4:	bf00      	nop
 80003f6:	e7fd      	b.n	80003f4 <HardFault_Handler+0x4>

080003f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003fc:	bf00      	nop
 80003fe:	e7fd      	b.n	80003fc <MemManage_Handler+0x4>

08000400 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000404:	bf00      	nop
 8000406:	e7fd      	b.n	8000404 <BusFault_Handler+0x4>

08000408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800040c:	bf00      	nop
 800040e:	e7fd      	b.n	800040c <UsageFault_Handler+0x4>

08000410 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000444:	4802      	ldr	r0, [pc, #8]	@ (8000450 <TIM1_UP_IRQHandler+0x10>)
 8000446:	f000 ffb5 	bl	80013b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000028 	.word	0x20000028

08000454 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000460:	f7ff fff8 	bl	8000454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000464:	480b      	ldr	r0, [pc, #44]	@ (8000494 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000466:	490c      	ldr	r1, [pc, #48]	@ (8000498 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000468:	4a0c      	ldr	r2, [pc, #48]	@ (800049c <LoopFillZerobss+0x16>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800046c:	e002      	b.n	8000474 <LoopCopyDataInit>

0800046e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000472:	3304      	adds	r3, #4

08000474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000478:	d3f9      	bcc.n	800046e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047a:	4a09      	ldr	r2, [pc, #36]	@ (80004a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800047c:	4c09      	ldr	r4, [pc, #36]	@ (80004a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000480:	e001      	b.n	8000486 <LoopFillZerobss>

08000482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000484:	3204      	adds	r2, #4

08000486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000488:	d3fb      	bcc.n	8000482 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800048a:	f001 f92f 	bl	80016ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800048e:	f7ff fe5d 	bl	800014c <main>
  bx lr
 8000492:	4770      	bx	lr
  ldr r0, =_sdata
 8000494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000498:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800049c:	08001780 	.word	0x08001780
  ldr r2, =_sbss
 80004a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004a4:	20000074 	.word	0x20000074

080004a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a8:	e7fe      	b.n	80004a8 <ADC1_2_IRQHandler>
	...

080004ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004b0:	4b08      	ldr	r3, [pc, #32]	@ (80004d4 <HAL_Init+0x28>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a07      	ldr	r2, [pc, #28]	@ (80004d4 <HAL_Init+0x28>)
 80004b6:	f043 0310 	orr.w	r3, r3, #16
 80004ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004bc:	2003      	movs	r0, #3
 80004be:	f000 f8d1 	bl	8000664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004c2:	200f      	movs	r0, #15
 80004c4:	f7ff ff1e 	bl	8000304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004c8:	f7ff feea 	bl	80002a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004cc:	2300      	movs	r3, #0
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40022000 	.word	0x40022000

080004d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004dc:	4b05      	ldr	r3, [pc, #20]	@ (80004f4 <HAL_IncTick+0x1c>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	461a      	mov	r2, r3
 80004e2:	4b05      	ldr	r3, [pc, #20]	@ (80004f8 <HAL_IncTick+0x20>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4413      	add	r3, r2
 80004e8:	4a03      	ldr	r2, [pc, #12]	@ (80004f8 <HAL_IncTick+0x20>)
 80004ea:	6013      	str	r3, [r2, #0]
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	20000008 	.word	0x20000008
 80004f8:	20000070 	.word	0x20000070

080004fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000500:	4b02      	ldr	r3, [pc, #8]	@ (800050c <HAL_GetTick+0x10>)
 8000502:	681b      	ldr	r3, [r3, #0]
}
 8000504:	4618      	mov	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	20000070 	.word	0x20000070

08000510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f003 0307 	and.w	r3, r3, #7
 800051e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000520:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <__NVIC_SetPriorityGrouping+0x44>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800052c:	4013      	ands	r3, r2
 800052e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000538:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800053c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000542:	4a04      	ldr	r2, [pc, #16]	@ (8000554 <__NVIC_SetPriorityGrouping+0x44>)
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	60d3      	str	r3, [r2, #12]
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800055c:	4b04      	ldr	r3, [pc, #16]	@ (8000570 <__NVIC_GetPriorityGrouping+0x18>)
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	0a1b      	lsrs	r3, r3, #8
 8000562:	f003 0307 	and.w	r3, r3, #7
}
 8000566:	4618      	mov	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800057e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000582:	2b00      	cmp	r3, #0
 8000584:	db0b      	blt.n	800059e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f003 021f 	and.w	r2, r3, #31
 800058c:	4906      	ldr	r1, [pc, #24]	@ (80005a8 <__NVIC_EnableIRQ+0x34>)
 800058e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000592:	095b      	lsrs	r3, r3, #5
 8000594:	2001      	movs	r0, #1
 8000596:	fa00 f202 	lsl.w	r2, r0, r2
 800059a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	e000e100 	.word	0xe000e100

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	@ (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	@ (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000600:	b480      	push	{r7}
 8000602:	b089      	sub	sp, #36	@ 0x24
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	f1c3 0307 	rsb	r3, r3, #7
 800061a:	2b04      	cmp	r3, #4
 800061c:	bf28      	it	cs
 800061e:	2304      	movcs	r3, #4
 8000620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	3304      	adds	r3, #4
 8000626:	2b06      	cmp	r3, #6
 8000628:	d902      	bls.n	8000630 <NVIC_EncodePriority+0x30>
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	3b03      	subs	r3, #3
 800062e:	e000      	b.n	8000632 <NVIC_EncodePriority+0x32>
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000634:	f04f 32ff 	mov.w	r2, #4294967295
 8000638:	69bb      	ldr	r3, [r7, #24]
 800063a:	fa02 f303 	lsl.w	r3, r2, r3
 800063e:	43da      	mvns	r2, r3
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	401a      	ands	r2, r3
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000648:	f04f 31ff 	mov.w	r1, #4294967295
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	fa01 f303 	lsl.w	r3, r1, r3
 8000652:	43d9      	mvns	r1, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000658:	4313      	orrs	r3, r2
         );
}
 800065a:	4618      	mov	r0, r3
 800065c:	3724      	adds	r7, #36	@ 0x24
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ff4f 	bl	8000510 <__NVIC_SetPriorityGrouping>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800067a:	b580      	push	{r7, lr}
 800067c:	b086      	sub	sp, #24
 800067e:	af00      	add	r7, sp, #0
 8000680:	4603      	mov	r3, r0
 8000682:	60b9      	str	r1, [r7, #8]
 8000684:	607a      	str	r2, [r7, #4]
 8000686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800068c:	f7ff ff64 	bl	8000558 <__NVIC_GetPriorityGrouping>
 8000690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	6978      	ldr	r0, [r7, #20]
 8000698:	f7ff ffb2 	bl	8000600 <NVIC_EncodePriority>
 800069c:	4602      	mov	r2, r0
 800069e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006a2:	4611      	mov	r1, r2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ff81 	bl	80005ac <__NVIC_SetPriority>
}
 80006aa:	bf00      	nop
 80006ac:	3718      	adds	r7, #24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff57 	bl	8000574 <__NVIC_EnableIRQ>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b08b      	sub	sp, #44	@ 0x2c
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006e2:	e169      	b.n	80009b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80006e4:	2201      	movs	r2, #1
 80006e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	69fa      	ldr	r2, [r7, #28]
 80006f4:	4013      	ands	r3, r2
 80006f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80006f8:	69ba      	ldr	r2, [r7, #24]
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	f040 8158 	bne.w	80009b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	4a9a      	ldr	r2, [pc, #616]	@ (8000970 <HAL_GPIO_Init+0x2a0>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d05e      	beq.n	80007ca <HAL_GPIO_Init+0xfa>
 800070c:	4a98      	ldr	r2, [pc, #608]	@ (8000970 <HAL_GPIO_Init+0x2a0>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d875      	bhi.n	80007fe <HAL_GPIO_Init+0x12e>
 8000712:	4a98      	ldr	r2, [pc, #608]	@ (8000974 <HAL_GPIO_Init+0x2a4>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d058      	beq.n	80007ca <HAL_GPIO_Init+0xfa>
 8000718:	4a96      	ldr	r2, [pc, #600]	@ (8000974 <HAL_GPIO_Init+0x2a4>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d86f      	bhi.n	80007fe <HAL_GPIO_Init+0x12e>
 800071e:	4a96      	ldr	r2, [pc, #600]	@ (8000978 <HAL_GPIO_Init+0x2a8>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d052      	beq.n	80007ca <HAL_GPIO_Init+0xfa>
 8000724:	4a94      	ldr	r2, [pc, #592]	@ (8000978 <HAL_GPIO_Init+0x2a8>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d869      	bhi.n	80007fe <HAL_GPIO_Init+0x12e>
 800072a:	4a94      	ldr	r2, [pc, #592]	@ (800097c <HAL_GPIO_Init+0x2ac>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d04c      	beq.n	80007ca <HAL_GPIO_Init+0xfa>
 8000730:	4a92      	ldr	r2, [pc, #584]	@ (800097c <HAL_GPIO_Init+0x2ac>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d863      	bhi.n	80007fe <HAL_GPIO_Init+0x12e>
 8000736:	4a92      	ldr	r2, [pc, #584]	@ (8000980 <HAL_GPIO_Init+0x2b0>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d046      	beq.n	80007ca <HAL_GPIO_Init+0xfa>
 800073c:	4a90      	ldr	r2, [pc, #576]	@ (8000980 <HAL_GPIO_Init+0x2b0>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d85d      	bhi.n	80007fe <HAL_GPIO_Init+0x12e>
 8000742:	2b12      	cmp	r3, #18
 8000744:	d82a      	bhi.n	800079c <HAL_GPIO_Init+0xcc>
 8000746:	2b12      	cmp	r3, #18
 8000748:	d859      	bhi.n	80007fe <HAL_GPIO_Init+0x12e>
 800074a:	a201      	add	r2, pc, #4	@ (adr r2, 8000750 <HAL_GPIO_Init+0x80>)
 800074c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000750:	080007cb 	.word	0x080007cb
 8000754:	080007a5 	.word	0x080007a5
 8000758:	080007b7 	.word	0x080007b7
 800075c:	080007f9 	.word	0x080007f9
 8000760:	080007ff 	.word	0x080007ff
 8000764:	080007ff 	.word	0x080007ff
 8000768:	080007ff 	.word	0x080007ff
 800076c:	080007ff 	.word	0x080007ff
 8000770:	080007ff 	.word	0x080007ff
 8000774:	080007ff 	.word	0x080007ff
 8000778:	080007ff 	.word	0x080007ff
 800077c:	080007ff 	.word	0x080007ff
 8000780:	080007ff 	.word	0x080007ff
 8000784:	080007ff 	.word	0x080007ff
 8000788:	080007ff 	.word	0x080007ff
 800078c:	080007ff 	.word	0x080007ff
 8000790:	080007ff 	.word	0x080007ff
 8000794:	080007ad 	.word	0x080007ad
 8000798:	080007c1 	.word	0x080007c1
 800079c:	4a79      	ldr	r2, [pc, #484]	@ (8000984 <HAL_GPIO_Init+0x2b4>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d013      	beq.n	80007ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007a2:	e02c      	b.n	80007fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	623b      	str	r3, [r7, #32]
          break;
 80007aa:	e029      	b.n	8000800 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	3304      	adds	r3, #4
 80007b2:	623b      	str	r3, [r7, #32]
          break;
 80007b4:	e024      	b.n	8000800 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	3308      	adds	r3, #8
 80007bc:	623b      	str	r3, [r7, #32]
          break;
 80007be:	e01f      	b.n	8000800 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	330c      	adds	r3, #12
 80007c6:	623b      	str	r3, [r7, #32]
          break;
 80007c8:	e01a      	b.n	8000800 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d102      	bne.n	80007d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007d2:	2304      	movs	r3, #4
 80007d4:	623b      	str	r3, [r7, #32]
          break;
 80007d6:	e013      	b.n	8000800 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d105      	bne.n	80007ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007e0:	2308      	movs	r3, #8
 80007e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	69fa      	ldr	r2, [r7, #28]
 80007e8:	611a      	str	r2, [r3, #16]
          break;
 80007ea:	e009      	b.n	8000800 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007ec:	2308      	movs	r3, #8
 80007ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	69fa      	ldr	r2, [r7, #28]
 80007f4:	615a      	str	r2, [r3, #20]
          break;
 80007f6:	e003      	b.n	8000800 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
          break;
 80007fc:	e000      	b.n	8000800 <HAL_GPIO_Init+0x130>
          break;
 80007fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	2bff      	cmp	r3, #255	@ 0xff
 8000804:	d801      	bhi.n	800080a <HAL_GPIO_Init+0x13a>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	e001      	b.n	800080e <HAL_GPIO_Init+0x13e>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3304      	adds	r3, #4
 800080e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	2bff      	cmp	r3, #255	@ 0xff
 8000814:	d802      	bhi.n	800081c <HAL_GPIO_Init+0x14c>
 8000816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	e002      	b.n	8000822 <HAL_GPIO_Init+0x152>
 800081c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800081e:	3b08      	subs	r3, #8
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	210f      	movs	r1, #15
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	fa01 f303 	lsl.w	r3, r1, r3
 8000830:	43db      	mvns	r3, r3
 8000832:	401a      	ands	r2, r3
 8000834:	6a39      	ldr	r1, [r7, #32]
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	fa01 f303 	lsl.w	r3, r1, r3
 800083c:	431a      	orrs	r2, r3
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800084a:	2b00      	cmp	r3, #0
 800084c:	f000 80b1 	beq.w	80009b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000850:	4b4d      	ldr	r3, [pc, #308]	@ (8000988 <HAL_GPIO_Init+0x2b8>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a4c      	ldr	r2, [pc, #304]	@ (8000988 <HAL_GPIO_Init+0x2b8>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b4a      	ldr	r3, [pc, #296]	@ (8000988 <HAL_GPIO_Init+0x2b8>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000868:	4a48      	ldr	r2, [pc, #288]	@ (800098c <HAL_GPIO_Init+0x2bc>)
 800086a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800086c:	089b      	lsrs	r3, r3, #2
 800086e:	3302      	adds	r3, #2
 8000870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000874:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000878:	f003 0303 	and.w	r3, r3, #3
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	220f      	movs	r2, #15
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	4013      	ands	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a40      	ldr	r2, [pc, #256]	@ (8000990 <HAL_GPIO_Init+0x2c0>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d013      	beq.n	80008bc <HAL_GPIO_Init+0x1ec>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a3f      	ldr	r2, [pc, #252]	@ (8000994 <HAL_GPIO_Init+0x2c4>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d00d      	beq.n	80008b8 <HAL_GPIO_Init+0x1e8>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a3e      	ldr	r2, [pc, #248]	@ (8000998 <HAL_GPIO_Init+0x2c8>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d007      	beq.n	80008b4 <HAL_GPIO_Init+0x1e4>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a3d      	ldr	r2, [pc, #244]	@ (800099c <HAL_GPIO_Init+0x2cc>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d101      	bne.n	80008b0 <HAL_GPIO_Init+0x1e0>
 80008ac:	2303      	movs	r3, #3
 80008ae:	e006      	b.n	80008be <HAL_GPIO_Init+0x1ee>
 80008b0:	2304      	movs	r3, #4
 80008b2:	e004      	b.n	80008be <HAL_GPIO_Init+0x1ee>
 80008b4:	2302      	movs	r3, #2
 80008b6:	e002      	b.n	80008be <HAL_GPIO_Init+0x1ee>
 80008b8:	2301      	movs	r3, #1
 80008ba:	e000      	b.n	80008be <HAL_GPIO_Init+0x1ee>
 80008bc:	2300      	movs	r3, #0
 80008be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008c0:	f002 0203 	and.w	r2, r2, #3
 80008c4:	0092      	lsls	r2, r2, #2
 80008c6:	4093      	lsls	r3, r2
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80008ce:	492f      	ldr	r1, [pc, #188]	@ (800098c <HAL_GPIO_Init+0x2bc>)
 80008d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d2:	089b      	lsrs	r3, r3, #2
 80008d4:	3302      	adds	r3, #2
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d006      	beq.n	80008f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008e8:	4b2d      	ldr	r3, [pc, #180]	@ (80009a0 <HAL_GPIO_Init+0x2d0>)
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	492c      	ldr	r1, [pc, #176]	@ (80009a0 <HAL_GPIO_Init+0x2d0>)
 80008ee:	69bb      	ldr	r3, [r7, #24]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	608b      	str	r3, [r1, #8]
 80008f4:	e006      	b.n	8000904 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008f6:	4b2a      	ldr	r3, [pc, #168]	@ (80009a0 <HAL_GPIO_Init+0x2d0>)
 80008f8:	689a      	ldr	r2, [r3, #8]
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	43db      	mvns	r3, r3
 80008fe:	4928      	ldr	r1, [pc, #160]	@ (80009a0 <HAL_GPIO_Init+0x2d0>)
 8000900:	4013      	ands	r3, r2
 8000902:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800090c:	2b00      	cmp	r3, #0
 800090e:	d006      	beq.n	800091e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000910:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <HAL_GPIO_Init+0x2d0>)
 8000912:	68da      	ldr	r2, [r3, #12]
 8000914:	4922      	ldr	r1, [pc, #136]	@ (80009a0 <HAL_GPIO_Init+0x2d0>)
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	4313      	orrs	r3, r2
 800091a:	60cb      	str	r3, [r1, #12]
 800091c:	e006      	b.n	800092c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800091e:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <HAL_GPIO_Init+0x2d0>)
 8000920:	68da      	ldr	r2, [r3, #12]
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	43db      	mvns	r3, r3
 8000926:	491e      	ldr	r1, [pc, #120]	@ (80009a0 <HAL_GPIO_Init+0x2d0>)
 8000928:	4013      	ands	r3, r2
 800092a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000934:	2b00      	cmp	r3, #0
 8000936:	d006      	beq.n	8000946 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000938:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <HAL_GPIO_Init+0x2d0>)
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	4918      	ldr	r1, [pc, #96]	@ (80009a0 <HAL_GPIO_Init+0x2d0>)
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	4313      	orrs	r3, r2
 8000942:	604b      	str	r3, [r1, #4]
 8000944:	e006      	b.n	8000954 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000946:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <HAL_GPIO_Init+0x2d0>)
 8000948:	685a      	ldr	r2, [r3, #4]
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	43db      	mvns	r3, r3
 800094e:	4914      	ldr	r1, [pc, #80]	@ (80009a0 <HAL_GPIO_Init+0x2d0>)
 8000950:	4013      	ands	r3, r2
 8000952:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800095c:	2b00      	cmp	r3, #0
 800095e:	d021      	beq.n	80009a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_GPIO_Init+0x2d0>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	490e      	ldr	r1, [pc, #56]	@ (80009a0 <HAL_GPIO_Init+0x2d0>)
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	4313      	orrs	r3, r2
 800096a:	600b      	str	r3, [r1, #0]
 800096c:	e021      	b.n	80009b2 <HAL_GPIO_Init+0x2e2>
 800096e:	bf00      	nop
 8000970:	10320000 	.word	0x10320000
 8000974:	10310000 	.word	0x10310000
 8000978:	10220000 	.word	0x10220000
 800097c:	10210000 	.word	0x10210000
 8000980:	10120000 	.word	0x10120000
 8000984:	10110000 	.word	0x10110000
 8000988:	40021000 	.word	0x40021000
 800098c:	40010000 	.word	0x40010000
 8000990:	40010800 	.word	0x40010800
 8000994:	40010c00 	.word	0x40010c00
 8000998:	40011000 	.word	0x40011000
 800099c:	40011400 	.word	0x40011400
 80009a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009a4:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <HAL_GPIO_Init+0x304>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	43db      	mvns	r3, r3
 80009ac:	4909      	ldr	r1, [pc, #36]	@ (80009d4 <HAL_GPIO_Init+0x304>)
 80009ae:	4013      	ands	r3, r2
 80009b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80009b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b4:	3301      	adds	r3, #1
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009be:	fa22 f303 	lsr.w	r3, r2, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f47f ae8e 	bne.w	80006e4 <HAL_GPIO_Init+0x14>
  }
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	372c      	adds	r7, #44	@ 0x2c
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	40010400 	.word	0x40010400

080009d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	807b      	strh	r3, [r7, #2]
 80009e4:	4613      	mov	r3, r2
 80009e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009e8:	787b      	ldrb	r3, [r7, #1]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009ee:	887a      	ldrh	r2, [r7, #2]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80009f4:	e003      	b.n	80009fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009f6:	887b      	ldrh	r3, [r7, #2]
 80009f8:	041a      	lsls	r2, r3, #16
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	611a      	str	r2, [r3, #16]
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d101      	bne.n	8000a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e272      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	f000 8087 	beq.w	8000b36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a28:	4b92      	ldr	r3, [pc, #584]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 030c 	and.w	r3, r3, #12
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	d00c      	beq.n	8000a4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a34:	4b8f      	ldr	r3, [pc, #572]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 030c 	and.w	r3, r3, #12
 8000a3c:	2b08      	cmp	r3, #8
 8000a3e:	d112      	bne.n	8000a66 <HAL_RCC_OscConfig+0x5e>
 8000a40:	4b8c      	ldr	r3, [pc, #560]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a4c:	d10b      	bne.n	8000a66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a4e:	4b89      	ldr	r3, [pc, #548]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d06c      	beq.n	8000b34 <HAL_RCC_OscConfig+0x12c>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d168      	bne.n	8000b34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e24c      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a6e:	d106      	bne.n	8000a7e <HAL_RCC_OscConfig+0x76>
 8000a70:	4b80      	ldr	r3, [pc, #512]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a7f      	ldr	r2, [pc, #508]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	e02e      	b.n	8000adc <HAL_RCC_OscConfig+0xd4>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d10c      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x98>
 8000a86:	4b7b      	ldr	r3, [pc, #492]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a7a      	ldr	r2, [pc, #488]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a90:	6013      	str	r3, [r2, #0]
 8000a92:	4b78      	ldr	r3, [pc, #480]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a77      	ldr	r2, [pc, #476]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000a98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	e01d      	b.n	8000adc <HAL_RCC_OscConfig+0xd4>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000aa8:	d10c      	bne.n	8000ac4 <HAL_RCC_OscConfig+0xbc>
 8000aaa:	4b72      	ldr	r3, [pc, #456]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a71      	ldr	r2, [pc, #452]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000ab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	4b6f      	ldr	r3, [pc, #444]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a6e      	ldr	r2, [pc, #440]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ac0:	6013      	str	r3, [r2, #0]
 8000ac2:	e00b      	b.n	8000adc <HAL_RCC_OscConfig+0xd4>
 8000ac4:	4b6b      	ldr	r3, [pc, #428]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a6a      	ldr	r2, [pc, #424]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	4b68      	ldr	r3, [pc, #416]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a67      	ldr	r2, [pc, #412]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000ad6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ada:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d013      	beq.n	8000b0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ae4:	f7ff fd0a 	bl	80004fc <HAL_GetTick>
 8000ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aea:	e008      	b.n	8000afe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000aec:	f7ff fd06 	bl	80004fc <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	2b64      	cmp	r3, #100	@ 0x64
 8000af8:	d901      	bls.n	8000afe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000afa:	2303      	movs	r3, #3
 8000afc:	e200      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000afe:	4b5d      	ldr	r3, [pc, #372]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d0f0      	beq.n	8000aec <HAL_RCC_OscConfig+0xe4>
 8000b0a:	e014      	b.n	8000b36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b0c:	f7ff fcf6 	bl	80004fc <HAL_GetTick>
 8000b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b12:	e008      	b.n	8000b26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b14:	f7ff fcf2 	bl	80004fc <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	2b64      	cmp	r3, #100	@ 0x64
 8000b20:	d901      	bls.n	8000b26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b22:	2303      	movs	r3, #3
 8000b24:	e1ec      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b26:	4b53      	ldr	r3, [pc, #332]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1f0      	bne.n	8000b14 <HAL_RCC_OscConfig+0x10c>
 8000b32:	e000      	b.n	8000b36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d063      	beq.n	8000c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b42:	4b4c      	ldr	r3, [pc, #304]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f003 030c 	and.w	r3, r3, #12
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00b      	beq.n	8000b66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b4e:	4b49      	ldr	r3, [pc, #292]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 030c 	and.w	r3, r3, #12
 8000b56:	2b08      	cmp	r3, #8
 8000b58:	d11c      	bne.n	8000b94 <HAL_RCC_OscConfig+0x18c>
 8000b5a:	4b46      	ldr	r3, [pc, #280]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d116      	bne.n	8000b94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b66:	4b43      	ldr	r3, [pc, #268]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d005      	beq.n	8000b7e <HAL_RCC_OscConfig+0x176>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	691b      	ldr	r3, [r3, #16]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d001      	beq.n	8000b7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e1c0      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	4939      	ldr	r1, [pc, #228]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b92:	e03a      	b.n	8000c0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d020      	beq.n	8000bde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b9c:	4b36      	ldr	r3, [pc, #216]	@ (8000c78 <HAL_RCC_OscConfig+0x270>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba2:	f7ff fcab 	bl	80004fc <HAL_GetTick>
 8000ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ba8:	e008      	b.n	8000bbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000baa:	f7ff fca7 	bl	80004fc <HAL_GetTick>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d901      	bls.n	8000bbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e1a1      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0f0      	beq.n	8000baa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	4927      	ldr	r1, [pc, #156]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	600b      	str	r3, [r1, #0]
 8000bdc:	e015      	b.n	8000c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bde:	4b26      	ldr	r3, [pc, #152]	@ (8000c78 <HAL_RCC_OscConfig+0x270>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be4:	f7ff fc8a 	bl	80004fc <HAL_GetTick>
 8000be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bea:	e008      	b.n	8000bfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bec:	f7ff fc86 	bl	80004fc <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d901      	bls.n	8000bfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e180      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1f0      	bne.n	8000bec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d03a      	beq.n	8000c8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d019      	beq.n	8000c52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c1e:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <HAL_RCC_OscConfig+0x274>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c24:	f7ff fc6a 	bl	80004fc <HAL_GetTick>
 8000c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c2a:	e008      	b.n	8000c3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c2c:	f7ff fc66 	bl	80004fc <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d901      	bls.n	8000c3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e160      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0f0      	beq.n	8000c2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f000 faea 	bl	8001224 <RCC_Delay>
 8000c50:	e01c      	b.n	8000c8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c52:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <HAL_RCC_OscConfig+0x274>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c58:	f7ff fc50 	bl	80004fc <HAL_GetTick>
 8000c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c5e:	e00f      	b.n	8000c80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c60:	f7ff fc4c 	bl	80004fc <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d908      	bls.n	8000c80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e146      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	42420000 	.word	0x42420000
 8000c7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c80:	4b92      	ldr	r3, [pc, #584]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1e9      	bne.n	8000c60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	f000 80a6 	beq.w	8000de6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c9e:	4b8b      	ldr	r3, [pc, #556]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10d      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	4b88      	ldr	r3, [pc, #544]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	4a87      	ldr	r2, [pc, #540]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb4:	61d3      	str	r3, [r2, #28]
 8000cb6:	4b85      	ldr	r3, [pc, #532]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cc6:	4b82      	ldr	r3, [pc, #520]	@ (8000ed0 <HAL_RCC_OscConfig+0x4c8>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d118      	bne.n	8000d04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cd2:	4b7f      	ldr	r3, [pc, #508]	@ (8000ed0 <HAL_RCC_OscConfig+0x4c8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a7e      	ldr	r2, [pc, #504]	@ (8000ed0 <HAL_RCC_OscConfig+0x4c8>)
 8000cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cde:	f7ff fc0d 	bl	80004fc <HAL_GetTick>
 8000ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce4:	e008      	b.n	8000cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ce6:	f7ff fc09 	bl	80004fc <HAL_GetTick>
 8000cea:	4602      	mov	r2, r0
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b64      	cmp	r3, #100	@ 0x64
 8000cf2:	d901      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e103      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf8:	4b75      	ldr	r3, [pc, #468]	@ (8000ed0 <HAL_RCC_OscConfig+0x4c8>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0f0      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d106      	bne.n	8000d1a <HAL_RCC_OscConfig+0x312>
 8000d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d0e:	6a1b      	ldr	r3, [r3, #32]
 8000d10:	4a6e      	ldr	r2, [pc, #440]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6213      	str	r3, [r2, #32]
 8000d18:	e02d      	b.n	8000d76 <HAL_RCC_OscConfig+0x36e>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10c      	bne.n	8000d3c <HAL_RCC_OscConfig+0x334>
 8000d22:	4b6a      	ldr	r3, [pc, #424]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d24:	6a1b      	ldr	r3, [r3, #32]
 8000d26:	4a69      	ldr	r2, [pc, #420]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d28:	f023 0301 	bic.w	r3, r3, #1
 8000d2c:	6213      	str	r3, [r2, #32]
 8000d2e:	4b67      	ldr	r3, [pc, #412]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d30:	6a1b      	ldr	r3, [r3, #32]
 8000d32:	4a66      	ldr	r2, [pc, #408]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d34:	f023 0304 	bic.w	r3, r3, #4
 8000d38:	6213      	str	r3, [r2, #32]
 8000d3a:	e01c      	b.n	8000d76 <HAL_RCC_OscConfig+0x36e>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	2b05      	cmp	r3, #5
 8000d42:	d10c      	bne.n	8000d5e <HAL_RCC_OscConfig+0x356>
 8000d44:	4b61      	ldr	r3, [pc, #388]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	4a60      	ldr	r2, [pc, #384]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	6213      	str	r3, [r2, #32]
 8000d50:	4b5e      	ldr	r3, [pc, #376]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d52:	6a1b      	ldr	r3, [r3, #32]
 8000d54:	4a5d      	ldr	r2, [pc, #372]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6213      	str	r3, [r2, #32]
 8000d5c:	e00b      	b.n	8000d76 <HAL_RCC_OscConfig+0x36e>
 8000d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d60:	6a1b      	ldr	r3, [r3, #32]
 8000d62:	4a5a      	ldr	r2, [pc, #360]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d64:	f023 0301 	bic.w	r3, r3, #1
 8000d68:	6213      	str	r3, [r2, #32]
 8000d6a:	4b58      	ldr	r3, [pc, #352]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d6c:	6a1b      	ldr	r3, [r3, #32]
 8000d6e:	4a57      	ldr	r2, [pc, #348]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d70:	f023 0304 	bic.w	r3, r3, #4
 8000d74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d015      	beq.n	8000daa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7e:	f7ff fbbd 	bl	80004fc <HAL_GetTick>
 8000d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d84:	e00a      	b.n	8000d9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d86:	f7ff fbb9 	bl	80004fc <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d901      	bls.n	8000d9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e0b1      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000d9e:	6a1b      	ldr	r3, [r3, #32]
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0ee      	beq.n	8000d86 <HAL_RCC_OscConfig+0x37e>
 8000da8:	e014      	b.n	8000dd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000daa:	f7ff fba7 	bl	80004fc <HAL_GetTick>
 8000dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000db0:	e00a      	b.n	8000dc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000db2:	f7ff fba3 	bl	80004fc <HAL_GetTick>
 8000db6:	4602      	mov	r2, r0
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d901      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e09b      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dc8:	4b40      	ldr	r3, [pc, #256]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1ee      	bne.n	8000db2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000dd4:	7dfb      	ldrb	r3, [r7, #23]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d105      	bne.n	8000de6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dda:	4b3c      	ldr	r3, [pc, #240]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	4a3b      	ldr	r2, [pc, #236]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000de4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 8087 	beq.w	8000efe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000df0:	4b36      	ldr	r3, [pc, #216]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 030c 	and.w	r3, r3, #12
 8000df8:	2b08      	cmp	r3, #8
 8000dfa:	d061      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69db      	ldr	r3, [r3, #28]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d146      	bne.n	8000e92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e04:	4b33      	ldr	r3, [pc, #204]	@ (8000ed4 <HAL_RCC_OscConfig+0x4cc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0a:	f7ff fb77 	bl	80004fc <HAL_GetTick>
 8000e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e10:	e008      	b.n	8000e24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e12:	f7ff fb73 	bl	80004fc <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e06d      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e24:	4b29      	ldr	r3, [pc, #164]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1f0      	bne.n	8000e12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e38:	d108      	bne.n	8000e4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e3a:	4b24      	ldr	r3, [pc, #144]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	4921      	ldr	r1, [pc, #132]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a19      	ldr	r1, [r3, #32]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e5c:	430b      	orrs	r3, r1
 8000e5e:	491b      	ldr	r1, [pc, #108]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000e60:	4313      	orrs	r3, r2
 8000e62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e64:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed4 <HAL_RCC_OscConfig+0x4cc>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6a:	f7ff fb47 	bl	80004fc <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e70:	e008      	b.n	8000e84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e72:	f7ff fb43 	bl	80004fc <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e03d      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e84:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f0      	beq.n	8000e72 <HAL_RCC_OscConfig+0x46a>
 8000e90:	e035      	b.n	8000efe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e92:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <HAL_RCC_OscConfig+0x4cc>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e98:	f7ff fb30 	bl	80004fc <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ea0:	f7ff fb2c 	bl	80004fc <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e026      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f0      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x498>
 8000ebe:	e01e      	b.n	8000efe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d107      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e019      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40007000 	.word	0x40007000
 8000ed4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <HAL_RCC_OscConfig+0x500>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d106      	bne.n	8000efa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d001      	beq.n	8000efe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d101      	bne.n	8000f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e0d0      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f20:	4b6a      	ldr	r3, [pc, #424]	@ (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d910      	bls.n	8000f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f2e:	4b67      	ldr	r3, [pc, #412]	@ (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f023 0207 	bic.w	r2, r3, #7
 8000f36:	4965      	ldr	r1, [pc, #404]	@ (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f3e:	4b63      	ldr	r3, [pc, #396]	@ (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d001      	beq.n	8000f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e0b8      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d020      	beq.n	8000f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d005      	beq.n	8000f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f68:	4b59      	ldr	r3, [pc, #356]	@ (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	4a58      	ldr	r2, [pc, #352]	@ (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f80:	4b53      	ldr	r3, [pc, #332]	@ (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	4a52      	ldr	r2, [pc, #328]	@ (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f8c:	4b50      	ldr	r3, [pc, #320]	@ (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	494d      	ldr	r1, [pc, #308]	@ (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d040      	beq.n	800102c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d107      	bne.n	8000fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb2:	4b47      	ldr	r3, [pc, #284]	@ (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d115      	bne.n	8000fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e07f      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d107      	bne.n	8000fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fca:	4b41      	ldr	r3, [pc, #260]	@ (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d109      	bne.n	8000fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e073      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fda:	4b3d      	ldr	r3, [pc, #244]	@ (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e06b      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fea:	4b39      	ldr	r3, [pc, #228]	@ (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f023 0203 	bic.w	r2, r3, #3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	4936      	ldr	r1, [pc, #216]	@ (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ffc:	f7ff fa7e 	bl	80004fc <HAL_GetTick>
 8001000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001002:	e00a      	b.n	800101a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001004:	f7ff fa7a 	bl	80004fc <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001012:	4293      	cmp	r3, r2
 8001014:	d901      	bls.n	800101a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e053      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800101a:	4b2d      	ldr	r3, [pc, #180]	@ (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 020c 	and.w	r2, r3, #12
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	429a      	cmp	r2, r3
 800102a:	d1eb      	bne.n	8001004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800102c:	4b27      	ldr	r3, [pc, #156]	@ (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d210      	bcs.n	800105c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800103a:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f023 0207 	bic.w	r2, r3, #7
 8001042:	4922      	ldr	r1, [pc, #136]	@ (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	4313      	orrs	r3, r2
 8001048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800104a:	4b20      	ldr	r3, [pc, #128]	@ (80010cc <HAL_RCC_ClockConfig+0x1c0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	429a      	cmp	r2, r3
 8001056:	d001      	beq.n	800105c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e032      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	d008      	beq.n	800107a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001068:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	4916      	ldr	r1, [pc, #88]	@ (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001076:	4313      	orrs	r3, r2
 8001078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	2b00      	cmp	r3, #0
 8001084:	d009      	beq.n	800109a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001086:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	490e      	ldr	r1, [pc, #56]	@ (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001096:	4313      	orrs	r3, r2
 8001098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800109a:	f000 f821 	bl	80010e0 <HAL_RCC_GetSysClockFreq>
 800109e:	4602      	mov	r2, r0
 80010a0:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <HAL_RCC_ClockConfig+0x1c4>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	490a      	ldr	r1, [pc, #40]	@ (80010d4 <HAL_RCC_ClockConfig+0x1c8>)
 80010ac:	5ccb      	ldrb	r3, [r1, r3]
 80010ae:	fa22 f303 	lsr.w	r3, r2, r3
 80010b2:	4a09      	ldr	r2, [pc, #36]	@ (80010d8 <HAL_RCC_ClockConfig+0x1cc>)
 80010b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80010b6:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <HAL_RCC_ClockConfig+0x1d0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f922 	bl	8000304 <HAL_InitTick>

  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40022000 	.word	0x40022000
 80010d0:	40021000 	.word	0x40021000
 80010d4:	0800174c 	.word	0x0800174c
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001174 <HAL_RCC_GetSysClockFreq+0x94>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 030c 	and.w	r3, r3, #12
 8001106:	2b04      	cmp	r3, #4
 8001108:	d002      	beq.n	8001110 <HAL_RCC_GetSysClockFreq+0x30>
 800110a:	2b08      	cmp	r3, #8
 800110c:	d003      	beq.n	8001116 <HAL_RCC_GetSysClockFreq+0x36>
 800110e:	e027      	b.n	8001160 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001110:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <HAL_RCC_GetSysClockFreq+0x98>)
 8001112:	613b      	str	r3, [r7, #16]
      break;
 8001114:	e027      	b.n	8001166 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	0c9b      	lsrs	r3, r3, #18
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	4a17      	ldr	r2, [pc, #92]	@ (800117c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001120:	5cd3      	ldrb	r3, [r2, r3]
 8001122:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d010      	beq.n	8001150 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800112e:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <HAL_RCC_GetSysClockFreq+0x94>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	0c5b      	lsrs	r3, r3, #17
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	4a11      	ldr	r2, [pc, #68]	@ (8001180 <HAL_RCC_GetSysClockFreq+0xa0>)
 800113a:	5cd3      	ldrb	r3, [r2, r3]
 800113c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a0d      	ldr	r2, [pc, #52]	@ (8001178 <HAL_RCC_GetSysClockFreq+0x98>)
 8001142:	fb03 f202 	mul.w	r2, r3, r2
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	fbb2 f3f3 	udiv	r3, r2, r3
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	e004      	b.n	800115a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a0c      	ldr	r2, [pc, #48]	@ (8001184 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001154:	fb02 f303 	mul.w	r3, r2, r3
 8001158:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	613b      	str	r3, [r7, #16]
      break;
 800115e:	e002      	b.n	8001166 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <HAL_RCC_GetSysClockFreq+0x98>)
 8001162:	613b      	str	r3, [r7, #16]
      break;
 8001164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001166:	693b      	ldr	r3, [r7, #16]
}
 8001168:	4618      	mov	r0, r3
 800116a:	371c      	adds	r7, #28
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000
 8001178:	007a1200 	.word	0x007a1200
 800117c:	08001764 	.word	0x08001764
 8001180:	08001774 	.word	0x08001774
 8001184:	003d0900 	.word	0x003d0900

08001188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800118c:	4b02      	ldr	r3, [pc, #8]	@ (8001198 <HAL_RCC_GetHCLKFreq+0x10>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	20000000 	.word	0x20000000

0800119c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80011a0:	f7ff fff2 	bl	8001188 <HAL_RCC_GetHCLKFreq>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	0adb      	lsrs	r3, r3, #11
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	4903      	ldr	r1, [pc, #12]	@ (80011c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80011b2:	5ccb      	ldrb	r3, [r1, r3]
 80011b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40021000 	.word	0x40021000
 80011c0:	0800175c 	.word	0x0800175c

080011c4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	220f      	movs	r2, #15
 80011d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80011d4:	4b11      	ldr	r3, [pc, #68]	@ (800121c <HAL_RCC_GetClockConfig+0x58>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0203 	and.w	r2, r3, #3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80011e0:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <HAL_RCC_GetClockConfig+0x58>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80011ec:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <HAL_RCC_GetClockConfig+0x58>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <HAL_RCC_GetClockConfig+0x58>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	08db      	lsrs	r3, r3, #3
 80011fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_RCC_GetClockConfig+0x5c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0207 	and.w	r2, r3, #7
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	40021000 	.word	0x40021000
 8001220:	40022000 	.word	0x40022000

08001224 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800122c:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <RCC_Delay+0x34>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <RCC_Delay+0x38>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	0a5b      	lsrs	r3, r3, #9
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	fb02 f303 	mul.w	r3, r2, r3
 800123e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001240:	bf00      	nop
  }
  while (Delay --);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	60fa      	str	r2, [r7, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f9      	bne.n	8001240 <RCC_Delay+0x1c>
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	20000000 	.word	0x20000000
 800125c:	10624dd3 	.word	0x10624dd3

08001260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e041      	b.n	80012f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d106      	bne.n	800128c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f839 	bl	80012fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2202      	movs	r2, #2
 8001290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3304      	adds	r3, #4
 800129c:	4619      	mov	r1, r3
 800129e:	4610      	mov	r0, r2
 80012a0:	f000 f99c 	bl	80015dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b01      	cmp	r3, #1
 8001322:	d001      	beq.n	8001328 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e03a      	b.n	800139e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2202      	movs	r2, #2
 800132c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0201 	orr.w	r2, r2, #1
 800133e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a18      	ldr	r2, [pc, #96]	@ (80013a8 <HAL_TIM_Base_Start_IT+0x98>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d00e      	beq.n	8001368 <HAL_TIM_Base_Start_IT+0x58>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001352:	d009      	beq.n	8001368 <HAL_TIM_Base_Start_IT+0x58>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a14      	ldr	r2, [pc, #80]	@ (80013ac <HAL_TIM_Base_Start_IT+0x9c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d004      	beq.n	8001368 <HAL_TIM_Base_Start_IT+0x58>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a13      	ldr	r2, [pc, #76]	@ (80013b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d111      	bne.n	800138c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b06      	cmp	r3, #6
 8001378:	d010      	beq.n	800139c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f042 0201 	orr.w	r2, r2, #1
 8001388:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800138a:	e007      	b.n	800139c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f042 0201 	orr.w	r2, r2, #1
 800139a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	40012c00 	.word	0x40012c00
 80013ac:	40000400 	.word	0x40000400
 80013b0:	40000800 	.word	0x40000800

080013b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d020      	beq.n	8001418 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d01b      	beq.n	8001418 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f06f 0202 	mvn.w	r2, #2
 80013e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 f8d1 	bl	80015a6 <HAL_TIM_IC_CaptureCallback>
 8001404:	e005      	b.n	8001412 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f8c4 	bl	8001594 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 f8d3 	bl	80015b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	2b00      	cmp	r3, #0
 8001420:	d020      	beq.n	8001464 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	d01b      	beq.n	8001464 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f06f 0204 	mvn.w	r2, #4
 8001434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2202      	movs	r2, #2
 800143a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f8ab 	bl	80015a6 <HAL_TIM_IC_CaptureCallback>
 8001450:	e005      	b.n	800145e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f89e 	bl	8001594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f8ad 	bl	80015b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	2b00      	cmp	r3, #0
 800146c:	d020      	beq.n	80014b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	2b00      	cmp	r3, #0
 8001476:	d01b      	beq.n	80014b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f06f 0208 	mvn.w	r2, #8
 8001480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2204      	movs	r2, #4
 8001486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f885 	bl	80015a6 <HAL_TIM_IC_CaptureCallback>
 800149c:	e005      	b.n	80014aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f878 	bl	8001594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f887 	bl	80015b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d020      	beq.n	80014fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d01b      	beq.n	80014fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f06f 0210 	mvn.w	r2, #16
 80014cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2208      	movs	r2, #8
 80014d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f85f 	bl	80015a6 <HAL_TIM_IC_CaptureCallback>
 80014e8:	e005      	b.n	80014f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f852 	bl	8001594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f861 	bl	80015b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00c      	beq.n	8001520 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d007      	beq.n	8001520 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f06f 0201 	mvn.w	r2, #1
 8001518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7fe fea8 	bl	8000270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00c      	beq.n	8001544 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001530:	2b00      	cmp	r3, #0
 8001532:	d007      	beq.n	8001544 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800153c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f8c3 	bl	80016ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00c      	beq.n	8001568 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001554:	2b00      	cmp	r3, #0
 8001556:	d007      	beq.n	8001568 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f831 	bl	80015ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	f003 0320 	and.w	r3, r3, #32
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00c      	beq.n	800158c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f003 0320 	and.w	r3, r3, #32
 8001578:	2b00      	cmp	r3, #0
 800157a:	d007      	beq.n	800158c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f06f 0220 	mvn.w	r2, #32
 8001584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f896 	bl	80016b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr

080015a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a2f      	ldr	r2, [pc, #188]	@ (80016ac <TIM_Base_SetConfig+0xd0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d00b      	beq.n	800160c <TIM_Base_SetConfig+0x30>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015fa:	d007      	beq.n	800160c <TIM_Base_SetConfig+0x30>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a2c      	ldr	r2, [pc, #176]	@ (80016b0 <TIM_Base_SetConfig+0xd4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d003      	beq.n	800160c <TIM_Base_SetConfig+0x30>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a2b      	ldr	r2, [pc, #172]	@ (80016b4 <TIM_Base_SetConfig+0xd8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d108      	bne.n	800161e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a22      	ldr	r2, [pc, #136]	@ (80016ac <TIM_Base_SetConfig+0xd0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d00b      	beq.n	800163e <TIM_Base_SetConfig+0x62>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800162c:	d007      	beq.n	800163e <TIM_Base_SetConfig+0x62>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a1f      	ldr	r2, [pc, #124]	@ (80016b0 <TIM_Base_SetConfig+0xd4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d003      	beq.n	800163e <TIM_Base_SetConfig+0x62>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a1e      	ldr	r2, [pc, #120]	@ (80016b4 <TIM_Base_SetConfig+0xd8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d108      	bne.n	8001650 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	4313      	orrs	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	4313      	orrs	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a0d      	ldr	r2, [pc, #52]	@ (80016ac <TIM_Base_SetConfig+0xd0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d103      	bne.n	8001684 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	691a      	ldr	r2, [r3, #16]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d005      	beq.n	80016a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	f023 0201 	bic.w	r2, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	611a      	str	r2, [r3, #16]
  }
}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	40012c00 	.word	0x40012c00
 80016b0:	40000400 	.word	0x40000400
 80016b4:	40000800 	.word	0x40000800

080016b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <memset>:
 80016dc:	4603      	mov	r3, r0
 80016de:	4402      	add	r2, r0
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d100      	bne.n	80016e6 <memset+0xa>
 80016e4:	4770      	bx	lr
 80016e6:	f803 1b01 	strb.w	r1, [r3], #1
 80016ea:	e7f9      	b.n	80016e0 <memset+0x4>

080016ec <__libc_init_array>:
 80016ec:	b570      	push	{r4, r5, r6, lr}
 80016ee:	2600      	movs	r6, #0
 80016f0:	4d0c      	ldr	r5, [pc, #48]	@ (8001724 <__libc_init_array+0x38>)
 80016f2:	4c0d      	ldr	r4, [pc, #52]	@ (8001728 <__libc_init_array+0x3c>)
 80016f4:	1b64      	subs	r4, r4, r5
 80016f6:	10a4      	asrs	r4, r4, #2
 80016f8:	42a6      	cmp	r6, r4
 80016fa:	d109      	bne.n	8001710 <__libc_init_array+0x24>
 80016fc:	f000 f81a 	bl	8001734 <_init>
 8001700:	2600      	movs	r6, #0
 8001702:	4d0a      	ldr	r5, [pc, #40]	@ (800172c <__libc_init_array+0x40>)
 8001704:	4c0a      	ldr	r4, [pc, #40]	@ (8001730 <__libc_init_array+0x44>)
 8001706:	1b64      	subs	r4, r4, r5
 8001708:	10a4      	asrs	r4, r4, #2
 800170a:	42a6      	cmp	r6, r4
 800170c:	d105      	bne.n	800171a <__libc_init_array+0x2e>
 800170e:	bd70      	pop	{r4, r5, r6, pc}
 8001710:	f855 3b04 	ldr.w	r3, [r5], #4
 8001714:	4798      	blx	r3
 8001716:	3601      	adds	r6, #1
 8001718:	e7ee      	b.n	80016f8 <__libc_init_array+0xc>
 800171a:	f855 3b04 	ldr.w	r3, [r5], #4
 800171e:	4798      	blx	r3
 8001720:	3601      	adds	r6, #1
 8001722:	e7f2      	b.n	800170a <__libc_init_array+0x1e>
 8001724:	08001778 	.word	0x08001778
 8001728:	08001778 	.word	0x08001778
 800172c:	08001778 	.word	0x08001778
 8001730:	0800177c 	.word	0x0800177c

08001734 <_init>:
 8001734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001736:	bf00      	nop
 8001738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800173a:	bc08      	pop	{r3}
 800173c:	469e      	mov	lr, r3
 800173e:	4770      	bx	lr

08001740 <_fini>:
 8001740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001742:	bf00      	nop
 8001744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001746:	bc08      	pop	{r3}
 8001748:	469e      	mov	lr, r3
 800174a:	4770      	bx	lr
